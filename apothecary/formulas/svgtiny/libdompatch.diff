diff --git a/bindings/xml/libxml_xmlparser.c b/bindings/xml/libxml_xmlparser.c
index e4a6d80..6595678 100644
--- a/bindings/xml/libxml_xmlparser.c
+++ b/bindings/xml/libxml_xmlparser.c
@@ -6,6 +6,7 @@
  */
 
 #include <stdbool.h>
+#include <stdlib.h>
 #include <string.h>
 #include <assert.h>
 
@@ -316,7 +317,11 @@ dom_xml_error dom_xml_parser_completed(dom_xml_parser *parser)
 void xml_parser_start_document(void *ctx)
 {
 	dom_xml_parser *parser = (dom_xml_parser *) ctx;
+#if LIBXML_VERSION >= 21200
+	const xmlError *xmlerr;
+#else
 	xmlErrorPtr xmlerr;
+#endif
 
 	if (parser->err != DOM_NO_ERR)
 		return;
@@ -348,7 +353,11 @@ void xml_parser_end_document(void *ctx)
 	dom_xml_parser *parser = (dom_xml_parser *) ctx;
 	xmlNodePtr node;
 	xmlNodePtr n;
+#if LIBXML_VERSION >= 21200
+	const xmlError *xmlerr;
+#else
 	xmlErrorPtr xmlerr;
+#endif
 
 	if (parser->err != DOM_NO_ERR)
 		return;
@@ -430,7 +439,11 @@ void xml_parser_start_element_ns(void *ctx, const xmlChar *localname,
 {
 	dom_xml_parser *parser = (dom_xml_parser *) ctx;
 	xmlNodePtr parent = parser->xml_ctx->node;
+#if LIBXML_VERSION >= 21200
+	const xmlError *xmlerr;
+#else
 	xmlErrorPtr xmlerr;
+#endif
 
 	if (parser->err != DOM_NO_ERR)
 		return;
@@ -509,7 +522,11 @@ void xml_parser_end_element_ns(void *ctx, const xmlChar *localname,
 	dom_xml_parser *parser = (dom_xml_parser *) ctx;
 	xmlNodePtr node = parser->xml_ctx->node;
 	xmlNodePtr n;
+#if LIBXML_VERSION >= 21200
+	const xmlError *xmlerr;
+#else
 	xmlErrorPtr xmlerr;
+#endif
 
 	if (parser->err != DOM_NO_ERR)
 		return;
@@ -700,7 +717,7 @@ dom_exception xml_parser_add_element_node(dom_xml_parser *parser,
 			strlen((const char *) child->ns->prefix) : 0) +
 			(child->ns->prefix != NULL ? 1 : 0) /* ':' */ +
 			strlen((const char *) child->name);
-		uint8_t qnamebuf[qnamelen + 1 /* '\0' */];
+		uint8_t *qnamebuf = (uint8_t *)malloc(qnamelen + 1 /* '\0' */);
 
 		/* Create namespace DOM string */
 		err = dom_string_create(
@@ -710,6 +727,7 @@ dom_exception xml_parser_add_element_node(dom_xml_parser *parser,
 		if (err != DOM_NO_ERR) {
 			parser->msg(DOM_MSG_CRITICAL, parser->mctx,
 					"No memory for namespace");
+			if(qnamebuf) free(qnamebuf);
 			return err;
 		}
 
@@ -730,6 +748,7 @@ dom_exception xml_parser_add_element_node(dom_xml_parser *parser,
 			dom_string_unref(namespace);
 			parser->msg(DOM_MSG_CRITICAL, parser->mctx,
 					"No memory for qname");
+			if(qnamebuf) free(qnamebuf);
 			return err;
 		}
 
@@ -742,12 +761,14 @@ dom_exception xml_parser_add_element_node(dom_xml_parser *parser,
 			parser->msg(DOM_MSG_CRITICAL, parser->mctx,
 					"Failed creating element '%s'",
 					qnamebuf);
+			if(qnamebuf) free(qnamebuf);
 			return err;
 		}
 
 		/* No longer need namespace / qname */
 		dom_string_unref(namespace);
 		dom_string_unref(qname);
+		if(qnamebuf) free(qnamebuf);
 	}
 
 	/* Add attributes to created element */
@@ -792,7 +813,7 @@ dom_exception xml_parser_add_element_node(dom_xml_parser *parser,
 				strlen((const char *) a->ns->prefix) : 0) +
 				(a->ns->prefix != NULL ? 1 : 0) /* ':' */ +
 				strlen((const char *) a->name);
-			uint8_t qnamebuf[qnamelen + 1 /* '\0' */];
+			uint8_t *qnamebuf = (uint8_t *)malloc(qnamelen + 1 /* '\0' */);
 
 			/* Create namespace DOM string */
 			err = dom_string_create(
@@ -802,6 +823,7 @@ dom_exception xml_parser_add_element_node(dom_xml_parser *parser,
 			if (err != DOM_NO_ERR) {
 				parser->msg(DOM_MSG_CRITICAL, parser->mctx,
 						"No memory for namespace");
+				if(qnamebuf) free(qnamebuf);
 				goto cleanup;
 			}
 
@@ -822,6 +844,7 @@ dom_exception xml_parser_add_element_node(dom_xml_parser *parser,
 				dom_string_unref(namespace);
 				parser->msg(DOM_MSG_CRITICAL, parser->mctx,
 						"No memory for qname");
+				if(qnamebuf) free(qnamebuf);
 				goto cleanup;
 			}
 
@@ -834,12 +857,14 @@ dom_exception xml_parser_add_element_node(dom_xml_parser *parser,
 				parser->msg(DOM_MSG_CRITICAL, parser->mctx,
 						"Failed creating attribute \
 						'%s'", qnamebuf);
+				if(qnamebuf) free(qnamebuf);
 				goto cleanup;
 			}
 
 			/* No longer need namespace / qname */
 			dom_string_unref(namespace);
 			dom_string_unref(qname);
+			if(qnamebuf) free(qnamebuf);
 		}
 
 		/* Clone subtree (attribute value) */
